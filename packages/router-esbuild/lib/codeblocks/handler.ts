export const mainHandlerCodeblock = [
  'import type { Type } from "arktype";',
  "import type {",
  "  APIGatewayProxyEvent,",
  "  APIGatewayProxyResult,",
  "  Context,",
  '} from "aws-lambda";',
  "",
  "type APIGatwayMethodHandler = (",
  "  event: APIGatewayProxyEvent & { parsedBody: unknown },",
  "  context: Context",
  ") => Promise<APIGatewayProxyResult>;",
  "",
  "type APIGatewayMethodMiddleware = (",
  "  event: APIGatewayProxyEvent,",
  "  context: Context",
  ") => Promise<APIGatewayProxyResult | null | undefined>;",
  "",
  "interface RouterHandlerOptions {",
  "  GET?: APIGatwayMethodHandler;",
  "  POST?: APIGatwayMethodHandler;",
  "  PUT?: APIGatwayMethodHandler;",
  "  DELETE?: APIGatwayMethodHandler;",
  "  HEAD?: APIGatwayMethodHandler;",
  "  OPTIONS?: APIGatwayMethodHandler;",
  "  cleanup?: () => void",
  "  schema?: Type;",
  "  middleware?: APIGatewayMethodMiddleware[]",
  "}",
  "",
  'const PROCESSABLE_METHODS = ["POST", "PUT", "PATCH", "DELETE"];',
  "",
  "const createHandler = ({ schema, cleanup, middleware = [], ...METHODS }: RouterHandlerOptions) => {",
  "  const handler: APIGatwayMethodHandler = async (event, context) => {",
  "    const { httpMethod } = event;",
  "    const methodHandler = METHODS[httpMethod as keyof typeof METHODS];",
  "",
  "    for (const middlewareHandler of middleware) {",
  "      const result = await middlewareHandler(event, context);",
  "      if (result) return result;",
  "    }",
  "",
  "    if (schema && PROCESSABLE_METHODS.includes(httpMethod)) {",
  "      try {",
  "        const processedBody =",
  '          typeof event.body === "string" ? JSON.parse(event.body) : event.body;',
  "",
  "        const { data, problems } = schema(processedBody);",
  '        if (problems) return { statusCode: 422, body: "" };',
  "        event.parsedBody = data;",
  "      } catch {",
  '        return { statusCode: 400, body: "" };',
  "      }",
  "    }",
  "",
  "    try {",
  '      if (!methodHandler) return { statusCode: 405, body: "" };',
  "      const result = await methodHandler(event, context);",
  "      return { ...result, body: JSON.stringify(result.body) };",
  "    } finally {",
  "      await cleanup?.()",
  "    }",
  "  };",
  "",
  "  return handler;",
  "};",
  "",
  "exports.main = createHandler(<RouterHandlerOptions>exports);",
  "",
];
